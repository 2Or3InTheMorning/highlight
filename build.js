const fs = require('fs');
const path = require('path');
const glob = require('glob');
const cssmin = require('cssmin');
const compile = require('google-closure-compiler-js').compile;

// minify all css files
let cssTask = Promise.all(
	glob.sync('Highlight/scripts/styles/*.css', {absolute: true}).map( (filepath) => {
		return new Promise( (resolve, reject) => {
			fs.readFile(filepath, {encoding: 'utf8'}, (err, data) => {
				if (err) return reject(err);

				let filename = path.basename(filepath, '.css');
				let style = filename.replace(/(?:^|[_-])([a-z])/g, ($0, $1) => ' ' + $1.toUpperCase() ).trim();
				let newPath = filepath.replace(/\.css$/, '.min.css');
				fs.unlink(filepath);
				fs.writeFile( newPath, cssmin(data), (err) => {
					if (err) return reject(err);
					resolve({filename, style});
				} );
			} );
		} );
	} )
)
.then( (names) => {
	console.log('✨  Successfully minified css files.');

	return (
		'public let hlStyles = [\n' +
		names.map( ({filename, style}) => `\t"${style}": "${filename}",\n` ).join('') +
		']'
	);
} )
.catch( err => {
	console.log(err);
} );

// 
let jsTask = Promise.all(
	glob.sync('node_modules/highlight.js/lib/languages/*.js', {absolute: true}).map( (filepath) => {
		return new Promise( (resolve, reject) => {
			fs.readFile(filepath, {encoding: 'utf8'}, (err, data) => {
				if (err) return reject(err);

				let filename = path.basename(filepath, '.js');
				data = data.replace(/^module.exports\s*=\s*/, `hljs.registerLanguage('${filename}',`).replace(/;$/, ');');

				resolve( data );
			} );
		} );
	} )
)
.then( (langs) => {
	let hljs = fs.readFileSync('node_modules/highlight.js/lib/highlight.js');
	hljs += langs.join('');

	console.log('⏱  Compiling the Highlight package file...');

	return new Promise( (resolve, reject) => {
		let result = compile({ jsCode: [{src: hljs}] });

		fs.writeFile('Highlight/scripts/highlight.pack.js', result.compiledCode, (err) => {
			if (err) return reject(err);
			console.log('✨  Successfully generated highlight.pack.js');

			resolve(`public let hlLangCount = ${langs.length}`);
		} );
	} );
} )
.catch( err => {
	console.log(err);
} );

// Generate the constant file.
Promise.all( [ jsTask, cssTask ] ).then( ([lang, style]) => {
	fs.writeFile(
		'Highlight/Constant.swift',
		`
//
// Constatnt.swift
// Highlight
//
// This file is automatically generated.
// DO NOT MODIFY THIS FILE MANUALLY
//

${lang}

${style}
		`.trim() + '\n'
	)
} );
